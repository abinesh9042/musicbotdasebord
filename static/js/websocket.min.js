class Socket{constructor(player,url){this.player=player;this.url=url;this.socket=null;this.heartbeatInterval=null;this.heartbeatMessage={op:"heartbeat"};this.DISCONNECT_DELAY=30000;this.RECONNECT_BASE_DELAY=2000;this.RECONNECT_MAX_DELAY=30000;this.reconnectAttempts=0;this.disconnectTimeout=null;this.handleVisibilityChange=this.handleVisibilityChange.bind(this);this.initVisibilityListener();}
connect(){this.socket=new WebSocket(this.url);this.socket.onopen=()=>{console.log("Connected to server!");updateWarningBar(false);this.startHeartbeat();if(this.callback)this.addMessageListener(this.callback);this.reconnectAttempts=0;};this.socket.onclose=()=>{console.log("Disconnected from server!");updateWarningBar(true);this.player.init();this.player.selectedBot=null;this.stopHeartbeat();this.scheduleReconnect();};this.socket.onerror=(error)=>{console.error("WebSocket error: ",error);this.scheduleReconnect();};}
scheduleReconnect(){if(document.visibilityState==="visible"){const delay=Math.min(this.RECONNECT_BASE_DELAY*Math.pow(2,this.reconnectAttempts),this.RECONNECT_MAX_DELAY);this.reconnectAttempts+=1;console.log(`Reconnecting in ${delay}ms...`);setTimeout(()=>this.reconnect(),delay);}}
reconnect(){if(!this.socket||this.socket.readyState===WebSocket.CLOSED){console.log("Attempting to reconnect...");this.connect();}}
disconnect(){if(this.socket){console.log("Disconnecting WebSocket...");this.stopHeartbeat();this.socket.close();this.socket=null;}}
send(msg){if(this.socket&&this.socket.readyState===WebSocket.OPEN){this.socket.send(JSON.stringify(msg));}}
startHeartbeat(){this.heartbeatInterval=setInterval(()=>{this.send(this.heartbeatMessage);},60000);}
stopHeartbeat(){if(this.heartbeatInterval){clearInterval(this.heartbeatInterval);this.heartbeatInterval=null;}}
handleVisibilityChange(){if(document.visibilityState==="hidden"){this.disconnectTimeout=setTimeout(()=>{this.disconnect();},this.DISCONNECT_DELAY);}else if(document.visibilityState==="visible"){clearTimeout(this.disconnectTimeout);this.reconnect();}}
addMessageListener(callback){this.callback=callback;if(this.socket){this.socket.onmessage=(event)=>{callback(event.data);};}}
removeMessageListener(){if(this.socket){this.socket.onmessage=null;}}
initVisibilityListener(){document.addEventListener("visibilitychange",this.handleVisibilityChange);}
cleanupVisibilityListener(){document.removeEventListener("visibilitychange",this.handleVisibilityChange);}
cleanup(){this.disconnect();this.cleanupVisibilityListener();clearTimeout(this.disconnectTimeout);this.stopHeartbeat();}}